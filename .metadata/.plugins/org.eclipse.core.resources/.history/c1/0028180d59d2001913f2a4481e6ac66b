import java.util.*;

public class Helper {

	private static Random rand = new Random();

	public static boolean isValidAmountOfPlayers(String input) {
		return (input.equals("1") || input.equals("2"));
	}

	public static boolean isValidName(String name) {
		return (!name.isEmpty() && name.matches("^[a-zA-Z ]*$"));
	}

	public static boolean isValidChar(char inputChar) {
		return (inputChar >= 'A' && inputChar <= 'J');
	}
	
	public static boolean isValidNr(String inputNr) {
		System.out.print("Input: " + inputNr);
		
		return (inputNr >= 1 && inputNr <= Field.BOARD_SIZE);
	}
	
	public static boolean isValidInput(String input) {
		return (Character.isLetter(input.charAt(0)) && Character.isDigit(input.charAt(1)) && isPosInField(input.charAt(0)) && isPosInField(input.charAt(0)));
	}

	public static String getPosition(char positionChar, int positionNr) {
		return (positionChar + "" + positionNr);
	}

	public static boolean isPosInField(char pos) {
		return (pos >= 'A' && pos <= 'J');
	}

	public static boolean isPosInField(int pos) {
		return (pos >= 1 && pos <= 10);
	}

	public static char getRandomChar(Ship ship, boolean firstShip) {
		int maxCharIndex;

		if (firstShip) {
			maxCharIndex = ((Field.BOARD_LETTERS.length / 2) + 1);
		} else {
			maxCharIndex = (Field.BOARD_LETTERS.length - ship.getLength());
		}

		return Field.BOARD_LETTERS[rand.nextInt(maxCharIndex)];
	}

	public static int getRandomNr(Ship ship, boolean firstShip) {
		int maxCharIndex;

		if (firstShip) {
			maxCharIndex = ((Field.BOARD_SIZE / 2) + 1);
		} else {
			maxCharIndex = (Field.BOARD_SIZE - ship.getLength());
		}

		return rand.nextInt(maxCharIndex) + 1;
	}

	public static boolean isSquareFree(HashMap<String, Square> playfield, String pos) {
		return playfield.get(pos) == null;
	}
}
