
public class Square {

	// CONSTANTS
	public static final char MISSED = '~';
	public static final char WATER = '~';
	public static final char HIT = '*';
	public static final char SUNK = 'V';
	public static final char DOT = '.';

	// VARIABLES
	private Ship ship;
	private boolean isHit;

	public Square() {
		this.ship = null;
		this.isHit = false;
	}

	public Square(Ship ship) {
		this.ship = ship;
	}

	public Ship getShip() {
		return ship;
	}
	
	public boolean hasShip() {
		return ship!= null;
	}

	public boolean isHit() {
		return isHit;
	}

	public void setIsHit() {
		if (ship != null)
			ship.addShotCount();

		this.isHit = true;
	}
	
	/**
	 * Checks whether the input character is valid or not. The character has to be a
	 * character between A and J (the field width).
	 * 
	 * @param char inputChar
	 * 
	 * @return boolean isValidChar
	 */
	public boolean isValidChar(char inputChar) {
		return (inputChar >= 'A' && inputChar <= 'J');
	}

	/**
	 * Checks whether the number is valid or not. The method tries to parse the
	 * string into an Integer. If number is correct, it checks if number is in board
	 * 
	 * @param String inputNr
	 * 
	 * @return boolean isValidNr
	 */
	public boolean isValidNr(String inputNr) {
		try {
			int input = Integer.parseInt(inputNr);
			return (input >= 1 && input <= Field.BOARD_SIZE);
		} catch (NumberFormatException | NullPointerException nfe) {
			return false;
		}
	}

	/**
	 * Checks whether the given input is valid or not. Uses the isValidChar and
	 * isValidNr to check input.
	 * 
	 * @param String input
	 * 
	 * @return boolean isValidSquare
	 */
	public boolean isValidSquare(String input) {
		return isValidChar(input.charAt(0)) && isValidNr(input.substring(1));
	}
}
